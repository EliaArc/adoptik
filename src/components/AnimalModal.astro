---
interface Props {
  name?: string;
  age?: string;
  breed?: string;
  description?: string;
  imageUrl?: string;
}

const {
  name = "Luna",
  age = "2 años",
  breed = "Labrador Retriever",
  description = "Luna es una perra muy cariñosa y juguetona. Le encanta correr y jugar con pelotas. Es muy buena con los niños y otros perros. Está buscando un hogar donde pueda recibir mucho amor y atención.",
  imageUrl = "/images/dog.jpg"
} = Astro.props;
---

<div id="animalModal" class="fixed bottom-0 left-0 right-0 z-50 bg-white rounded-t-3xl transition-all duration-300 ease-out h-[60vh] overflow-hidden will-change-transform" style="transform: translateY(100%);">
  <div class="h-full flex flex-col">
    <!-- Barra de arrastre -->
    <div class="w-full flex justify-center py-2 cursor-pointer" id="dragHandle">
      <div class="w-10 h-1 bg-gray-300 rounded-full"></div>
    </div>
    
    <!-- Contenido del modal -->
    <div class="flex-1 overflow-y-auto p-5" id="modalContent">
      <div class="flex flex-col space-y-4">
        <!-- Imagen del animal -->
        <div class="relative w-full h-96 rounded-xl overflow-hidden">
          <div class="absolute inset-0 bg-gray-800 flex items-center justify-center">
            <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512" class="w-24 h-24 text-gray-600" fill="currentColor">
              <path d="M226.5 92.9c14.3 42.9-.3 86.2-32.6 96.8s-70.1-15.6-84.4-58.5s.3-86.2 32.6-96.8s70.1 15.6 84.4 58.5z"/>
              <path d="M100.4 198.6c18.9 32.4 14.3 70.1-10.2 84.1s-59.7-.9-78.5-33.3S-2.7 179.3 21.8 165.3s59.7 .9 78.5 33.3z"/>
              <path d="M69.2 401.2C121.6 259.9 214.7 224 256 224s134.4 35.9 186.8 177.2c3.6 9.7 5.2 20.1 5.2 30.5v1.6c0 25.8-20.9 46.7-46.7 46.7c-11.5 0-22.9-1.4-34-4.2l-88-22c-15.3-3.8-31.3-3.8-46.6 0l-88 22c-11.1 2.8-22.5 4.2-34 4.2C84.9 480 64 459.1 64 433.3v-1.6c0-10.4 1.6-20.8 5.2-30.5z"/>
            </svg>
          </div>
        </div>
        
        <!-- Información del animal -->
        <div>
          <h2 class="text-2xl font-bold text-gray-900">{name}</h2>
          <div class="flex space-x-2 mt-1">
            <span class="bg-orange-100 text-orange-800 text-xs font-medium px-2.5 py-0.5 rounded">{age}</span>
            <span class="bg-blue-100 text-blue-800 text-xs font-medium px-2.5 py-0.5 rounded">{breed}</span>
          </div>
        </div>
        
        <!-- Descripción -->
        <div>
          <h3 class="text-lg font-semibold text-gray-900">Sobre {name}</h3>
          <p class="text-gray-700 mt-1">{description}</p>
        </div>
        
        <!-- Características -->
        <div>
          <h3 class="text-lg font-semibold text-gray-900">Características</h3>
          <div class="grid grid-cols-2 gap-2 mt-2">
            <div class="flex items-center space-x-2">
              <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 text-orange-500" viewBox="0 0 20 20" fill="currentColor">
                <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z" clip-rule="evenodd" />
              </svg>
              <span class="text-gray-700">Vacunado</span>
            </div>
            <div class="flex items-center space-x-2">
              <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 text-orange-500" viewBox="0 0 20 20" fill="currentColor">
                <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z" clip-rule="evenodd" />
              </svg>
              <span class="text-gray-700">Desparasitado</span>
            </div>
            <div class="flex items-center space-x-2">
              <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 text-orange-500" viewBox="0 0 20 20" fill="currentColor">
                <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z" clip-rule="evenodd" />
              </svg>
              <span class="text-gray-700">Esterilizado</span>
            </div>
            <div class="flex items-center space-x-2">
              <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 text-orange-500" viewBox="0 0 20 20" fill="currentColor">
                <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z" clip-rule="evenodd" />
              </svg>
              <span class="text-gray-700">Sociable</span>
            </div>
          </div>
        </div>
        
        <!-- Botón de contacto -->
        <div class="pt-4">
          <button class="w-full py-3 bg-gradient-to-r from-yellow-400 via-orange-500 to-yellow-500 text-white font-bold rounded-xl shadow-lg transform hover:scale-[1.02] transition-transform duration-300">
            Contactar para adoptar
          </button>
        </div>
        
        <!-- Información adicional -->
        <div class="pt-4 pb-20">
          <h3 class="text-lg font-semibold text-gray-900">Información adicional</h3>
          <p class="text-gray-700 mt-1">
            Todos nuestros animales están en perfecto estado de salud, con todas sus vacunas al día y desparasitados. Además, realizamos un seguimiento post-adopción para asegurarnos de que todo va bien.
          </p>
          <p class="text-gray-700 mt-4">
            Para adoptar a {name}, necesitarás:
          </p>
          <ul class="list-disc list-inside text-gray-700 mt-2">
            <li>Ser mayor de edad</li>
            <li>Tener un domicilio estable</li>
            <li>Pasar una entrevista con nuestro equipo</li>
            <li>Firmar un contrato de adopción</li>
          </ul>
        </div>
      </div>
    </div>
  </div>
</div>

<!-- Overlay para el fondo oscuro -->
<div id="modalOverlay" class="fixed inset-0 bg-black opacity-0 pointer-events-none transition-opacity duration-300 z-40"></div>

<style>
  /* Estilos para mejorar la animación del modal */
  #animalModal {
    transform: translateY(100%);
    backface-visibility: hidden;
    -webkit-backface-visibility: hidden;
  }
  
  #animalModal.closing {
    transition: transform 0.3s cubic-bezier(0.4, 0, 0.2, 1), opacity 0.3s ease-out;
  }
  
  #dragHandle {
    touch-action: none;
    cursor: grab;
  }
  
  #dragHandle:active {
    cursor: grabbing;
  }
  
  /* Mejora de rendimiento para animaciones */
  #animalModal, #modalOverlay {
    will-change: transform, opacity;
  }
</style>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    // Elementos del DOM
    const modal = document.getElementById('animalModal');
    const overlay = document.getElementById('modalOverlay');
    const dragHandle = document.getElementById('dragHandle');
    const modalContent = document.getElementById('modalContent');
    const openModalBtn = document.getElementById('openModalBtn');
    
    if (!modal || !overlay || !dragHandle || !modalContent) {
      console.error('No se encontraron elementos del modal');
      return;
    }
    
    // Función para abrir el modal
    function openModal() {
      console.log('Abriendo modal');
      modal.style.transform = 'translateY(0)';
      overlay.style.opacity = '0.5';
      overlay.style.pointerEvents = 'auto';
      document.body.style.overflow = 'hidden';
    }
    
    // Función para cerrar el modal
    function closeModal() {
      console.log('Cerrando modal');
      modal.style.transform = 'translateY(100%)';
      overlay.style.opacity = '0';
      overlay.style.pointerEvents = 'none';
      document.body.style.overflow = '';
    }
    
    // Evento para abrir el modal
    if (openModalBtn) {
      console.log('Botón encontrado, agregando evento');
      openModalBtn.addEventListener('click', openModal);
    } else {
      console.error('No se encontró el botón para abrir el modal');
    }
    
    // Cerrar modal al hacer clic en el overlay
    overlay.addEventListener('click', closeModal);
    
    // Expandir modal al hacer scroll
    modalContent.addEventListener('scroll', () => {
      if (modalContent.scrollTop > 50) {
        modal.style.height = '100vh';
      }
    });
    
    // Variables para el drag
    let startY = 0;
    let isDragging = false;
    
    // Eventos para arrastrar el modal
    dragHandle.addEventListener('mousedown', (e) => {
      isDragging = true;
      startY = e.clientY;
      document.addEventListener('mousemove', handleDrag);
      document.addEventListener('mouseup', stopDrag);
    });
    
    dragHandle.addEventListener('touchstart', (e) => {
      isDragging = true;
      startY = e.touches[0].clientY;
      document.addEventListener('touchmove', handleDrag, { passive: false });
      document.addEventListener('touchend', stopDrag);
    }, { passive: true });
    
    function handleDrag(e) {
      if (!isDragging) return;
      
      // Usar requestAnimationFrame para optimizar la animación
      requestAnimationFrame(() => {
        const currentY = e instanceof MouseEvent ? e.clientY : e.touches[0].clientY;
        const deltaY = currentY - startY;
        
        if (deltaY > 0) {
          // Aplicar una curva de suavizado para que el arrastre se sienta más natural
          // Usar transform con translateY y una pequeña escala para efecto visual
          const scale = 1 - (deltaY / window.innerHeight * 0.03); // Pequeña reducción de escala al arrastrar
          modal.style.transform = `translateY(${deltaY}px) scale(${scale})`;
          
          // Ajustar la opacidad del overlay de forma suave
          overlay.style.opacity = `${0.5 - (deltaY / window.innerHeight * 0.5)}`;
          
          // Cambiar el color del handle cuando se arrastra lo suficiente para cerrar
          if (deltaY > window.innerHeight * 0.3) {
            dragHandle.classList.add('bg-red-300');
          } else {
            dragHandle.classList.remove('bg-red-300');
          }
          
          if (e.cancelable) e.preventDefault();
        }
      });
    }
    
    function stopDrag() {
      if (!isDragging) return;
      
      // Obtener la posición actual del modal
      const transform = window.getComputedStyle(modal).transform;
      const matrix = new DOMMatrix(transform);
      const translateY = matrix.m42;
      
      // Limpiar los event listeners primero para evitar llamadas adicionales
      isDragging = false;
      document.removeEventListener('mousemove', handleDrag);
      document.removeEventListener('touchmove', handleDrag);
      document.removeEventListener('mouseup', stopDrag);
      document.removeEventListener('touchend', stopDrag);
      
      // Aplicar una animación suave usando clases de CSS en lugar de cambios directos de estilo
      if (translateY > window.innerHeight * 0.3) {
        // Animar el cierre con una transición suave
        modal.classList.add('closing');
        modal.style.transform = `translateY(${window.innerHeight}px)`;
        overlay.style.opacity = '0';
        
        // Esperar a que termine la animación antes de cerrar completamente
        setTimeout(() => {
          closeModal();
          modal.classList.remove('closing');
        }, 300);
      } else {
        // Animar el regreso a la posición original con una transición suave
        modal.style.transform = 'translateY(0) scale(1)';
        overlay.style.opacity = '0.5';
      }
      
      // Restaurar el color del handle
      if (dragHandle) {
        dragHandle.classList.remove('bg-red-300');
      }
    }
    
    // Alternar tamaño con doble clic
    dragHandle.addEventListener('dblclick', () => {
      if (modal.style.height === '100vh') {
        modal.style.height = '60vh';
      } else {
        modal.style.height = '100vh';
      }
    });
  });
</script>
